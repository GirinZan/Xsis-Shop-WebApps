@model XSIS.Shop.ViewModel.OrderViewModel

@{
    ViewBag.Title = "Create";

}
<style>
    .modal-content {
        width: 600px !important;
        margin: 30px auto !important;
    }
</style>
<h2>Create Order</h2>
@using (Html.BeginForm("Create", "Orders", FormMethod.Post))
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal card card-body">
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })

        <div class="form-group">
            @Html.LabelFor(model => model.OrderNumber, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-2">
                @Html.TextBoxFor(model => model.OrderNumber, new { @class = "form-control", @readonly = true })
                @Html.ValidationMessageFor(model => model.OrderNumber, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.OrderDate, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10 input-group">
                <span class="input-group-addon"><i class="zmdi zmdi-calendar"></i></span>
                @Html.EditorFor(model => model.OrderDate, new { htmlAttributes = new { @class = "form-control date-picker" } })
                @Html.ValidationMessageFor(model => model.OrderDate, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.CustomerId, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("CustomerId", null, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.CustomerId, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.orderItem, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <a class="modal-link btn btn-primary" onclick="CreateModal();">
                    Add Item
                </a>
                @Html.ValidationMessageFor(model => model.orderItem, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-sm-12">
                <table class="table table-striped">
                    <tr>
                        <th>
                            Product Name
                        </th>
                        <th>
                            Unit Price
                        </th>
                        <th>
                            Order Quantity
                        </th>
                        <th>
                            Total Amount
                        </th>
                        <th>
                            Action
                        </th>
                    </tr>
                    <tbody id="tbody"></tbody>
                </table>
            </div>
        </div>


        <div class="form-group">
            @Html.LabelFor(model => model.TotalAmount, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-2">
                @Html.EditorFor(model => model.TotalAmount, new { htmlAttributes = new { @class = "form-control", @readonly = true } })
                @Html.ValidationMessageFor(model => model.TotalAmount, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <button type="submit" class="btn btn-primary btn-sm">Submit</button>
            </div>
        </div>
        <hr />
    </div>
}
<div class="modal fade" id="modal-container" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
        </div>
    </div>
</div>
<script type="text/javascript">
    //$(document).ready(function () {
    //                        loadData();
    //                    });
    //$(function () {
                        //    // Initialize numeric spinner input boxes
                        //    //$(".numeric-spinner").spinedit();
                        //    // Initialize modal dialog
                        //    // attach modal-container bootstrap attributes to links with .modal-link class.
                        //    // when a link is clicked with these attributes, bootstrap will display the href content in a modal dialog.
                        //    $('body').on('click', '.modal-link', function (e) {
                        //        e.preventDefault();
                        //        $(this).attr('data-target', '#modal-container');
                        //        $(this).attr('data-toggle', 'modal');
                        //    });
                        //    // Attach listener to .modal-close-btn's so that when the button is pressed the modal dialog disappears
                        //    $('body').on('click', '.modal-close-btn', function () {
                        //        $('#modal-container').modal('hide');
                        //    });
                        //    //clear modal cache, so that new content can be loaded
                        //    $('#modal-container').on('hidden.bs.modal', function () {
                        //        $(this).removeData('bs.modal');
                        //    });
                        //    $('#CancelModal').on('click', function () {
                        //        return false;
                        //    }); });
    function CreateModal() {
      $.ajax({
          type: "GET",
          url: "/OrderItem/Create",
          contentType: "application/json;charset=utf-8",
          success: function (data) {
              $('.modal-content').html(data);
              $('#modal-container').modal('show');
          },
          error: function (data) {
              alert("hehe error");
          }
      })
    }
    function loadData() {
                            $.ajax({
                                url: "/OrderItem/Get",
                                type: "GET",
                                contentType: "application/json;charset=utf-8",
                                dataType: "json",
                                success: function (result) {
                                    var html = '';
                                    var totalHarga = 0;
                                    $.each(result, function (key, item) {
                                        html += '<tr>';
                                        html += '<td>' + item.ProductName + '</td>';
                                        html += '<td>' + item.UnitPrice + '</td>';
                                        html += '<td>' + item.Quantity + '</td>';
                                        html += '<td>' + item.TotalAmount + '</td>';
                                        html += '<td><a onclick="Delete(' + item.Id + ');" class="btn btn-danger">Delete</a></td>';
                                        html += '</tr>';
                                        totalHarga += item.TotalAmount;
                                    });
                                    $('#tbody').html(html);
                                    $('#TotalAmount').val(totalHarga);
                                },
                                error: function (errormessage) {
                                    alert(errormessage.responseText);
                                }
                            });
                        }
    function Add() {
                            var res = validate();
                            if (res == false) {
                                return false;
                            }
                            var empObj = {
                                ProductId: $('#ProductId').val(),
                                Quantity: $('#Quantity').val(),
                            };
                            $.ajax({
                                url: "/OrderItem/Add",
                                data: JSON.stringify(empObj),
                                type: "POST",
                                contentType: "application/json;charset=utf-8",
                                dataType: "json",
                                success: function (result) {
                                    loadData();
                                    $('#modal-container').modal('hide');
                                },
                                error: function (errormessage) {
                                    alert(errormessage.responseText);
                                }
                            });
                        }
    function validate() {
                            var isValid = true;
                            if ($('#Quantity').val().trim() == "") {
                                $('#Quantity').val(1).focusin().focusout();
                            }
                            if ($('#Quantity').val() <= 0) {
                                alert("Quantity value has to be more than 0");
                                isValid = false;
                            }
                            return isValid;
    }
    function Delete(ID) {
        var ans = confirm("Are you sure you want to delete this Record?");
        if (ans) {
            $.ajax({
                url: "/OrderItem/RemoveItem/" + ID,
                type: "POST",
                contentType: "application/json;charset=UTF-8",
                dataType: "json",
                success: function (result) {
                    loadData();
                },
                error: function (errormessage) {
                    alert(errormessage.responseText);
                }
            });
        }
    }
</script>


@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
